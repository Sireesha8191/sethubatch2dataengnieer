# How  to  print  dictionary  in  different  ways
a  =  {10 : 'Ramesh' ,  20 : 'Kiran' , 15 : 'Amar' , 18 : 'Sita'}  # ref a assign to object dict
print(a)          #Dictionary  with  print  function
How  to  print  dictionary  with  print()  function             # print(a)
print('Keys  of  dictionary')                        # print(a.keys()) i.e. dict_keys([10,20,15,18])
How  to  print  each  key  of  dict  'a'             # print((a.keys())
print('Values  of  dictionary')    # print(a.values()) i.e. dict_values(['Ramesh','Kiran','Amar','Sita'])
How  to  print  each  value  of  dict  'a'  # print(a.items())
print('All  the  tuples  of  dict_items   object')  # print(a.items()) i.e. ([(10,'Ramesh'),(20,'Kiran'),(15, 'Amar'),(18,'Sita')])
How  to  print  each  tuple  of  the  list  in  dict_items  object #print(a.items())
print('Elements  of  each   tuple')   #print(a.items())
How  to  print  elements  of  each  tuple  in  the  list  of  dict_items  object #print(a.items())
print('Keys  and  values  of  dictionary') #print(a.items())
How  to  print  each  key  and  corresponding  value  in  dict  'a' #print(a.items())




 #  Find  outputs (Home  work)
a = {
		print('Hyd') ,
		print('Sec') ,
		print('Cyb')
	}
print(type(a)) # type of the object i.e <class 'set'>
print(a) # 
print(len(a))




 #  Anonymous  object  demo  program
_ = 25 # ref _ assign to int object 25
print(_)  # 25
print(type(_))  # type of the object i.e. <class 'int'>
a , _ , c = 10 , 20 , 30
print(a) # 10
print(_) # 20
print(c) #30
for  _  in  range(5):
	print(_ , 'Hello') # Hello
Hello
Hello
Hello
Hello

'''
1) What  is   _   called ?   --->  Anonymous  object  (or) Nameless  object

2) How  many  nameless  objects  can  be  a  program ?  --->  Just  one  (or)  zero

3) What  happens  when  another  nameless  object  is  created ?  --->  Existing  nameless  object  gets  deleted

4) Can  there  be  multiple  nameless  objects  in  a  program ?  --->  No

5) _ = 10
    _ = 20
   What  happens  when  _ = 20  is  executed ?  --->  A  new  nameless  object  is  created  with  value  20  and
																				  old  nameless  object  with  10  is  lost
'''



 #  Find  outputs
a = 25 # ref a assign to object int 25
print(id(a))  # address of the object 25 i.e 1000 
a = 35  # ref a points to new ref 
print(id(a)) # address of the a i.e. 2000



 # Find  outputs (Home  work)
a = 25.7  # ref a points to object 25.7
print(id(a))  # address of the ref a i.e. 1000
print(a)   # 25.7
a = 35.6  # ref a points to object 35.6
print(id(a))  # address of the new ref a i.e. 2000 
print(a) # 35.6
b = True  # ref b assign to object True
print(id(b))  # address of the ref b i.e 3000
b = False # ref b assign to object False
print(id(b)) # address of the  new ref b i.e 4000
c = None # ref c assign to object None
print(id(c)) # address of the ref c i.e. 5000
c = None # ref c assign to object None
print(id(c))  # address of the ref a i.e. 5000



#  Find  outputs  (Home  work)
a = 'Hyd'  # ref a assign to object'Hyd'
print(id(a)) # address of the ref a i.e 1000
a[1] = 'e'  # error due to str is immutable
a = 'Sec'  #  new ref a assign to 'Sec' object
print(id(a))  # new address of the ref a
b = (10 , 20 , 15 , 18)  # ref b assign to object tuple
print(id(b))  # address of the ref b i.e. 1000
b[2] = 19  # Error due to tuple is immutable
b = (30 , 40 , 35 , 32)  # new ref b assign to tuple object
print(id(b))  # address of the new ref b i.e 2000
c = range(5)  # ref c assign to range object
print(id(c)) # address of the ref c i.e 3000
c[3] = 10  # Error due to range immutable
c = range(5) # new ref c points to range object 
print(id(c))  # address of the new ref c i.e. 4000



 # Find  outputs  (Home  work)
a = 25 # ref a assigns to int object
b = 25  # ref b assign to same int object 
print(a  is  b) # True
c = 'Hyd'  # ref c assign to str object
d = 'Hyd'  # ref d assign to same str object
print(c  is  d)  # True
e = False  # ref e assign to bool object
f = False  # ref f assign to same bool object
print(e  is  f)  # True
g = range(10)  # ref g assign to range object
h = range(10) # ref h assign to same range object
print(g  is  h)  # True



 #Find  outputs(Home  work)
a = [10 , 20 , 15 , 18]   # ref a assign to the list object
b = [10 , 20 , 15 , 18]  # ref b assign to same object
print(a  is  b)  # True
c =  {10 : 20, 30 : 40}   #ref a assign to the dict object
d =  {10 : 20, 30 : 40}  # ref a assign to the dict object
print(c  is  d) # True 
e = (10 , 20 , 15 , 18)  # ref e assign to the tuple object
f = (10 , 20 , 15 , 18) # ref f assign to the Same tuple object
print(e  is  f)  # True 
g = {10 , 20 , 15 , 18} # ref g assign to the set object
h = {10 , 20 , 15 , 18}  # ref h assign to the Same set object
print(g  is  h)



# Find outputs (Home work)
print(10 + 20)  # 30
print(10.8 + 20.6)  # 31.4
print(3 + 4j + 5 + 6j)  # 8+10j
print(True + False)  # 1
print('Hyder' + 'abad')  # Hyderabad
print('Sankar' + 'Dayal' + 'Sarma')  # SankarDayalSarma
print('10' + '20') # 1020
print([10 , 20 , 30] + [1 , 2 , 3]) # [10,20,30,1,2,3]
print((25 , 10.8 , 'Hyd') + (3 + 4j , True , None))  # [25,10.8,'Hyd',3+4j,True,None]
print({10 , 20} + {30 , 40}) 
print({10 : 'Hyd'} + {20 : 'Sec'})
print(range(4) + range(5))
print(10 + '20')
print([10 , 20 , 30] + 5)
print([10 , 20 , 30] + (40 , 50 , 60))



 # Find outputs (Home work)
print(25 * 3)  # 75
print(10.8 * 25.6)  # 276.48
print(True * False)  # 0
print((3 + 4j) * (5 + 6j))  # 
print(3 + 4j * 5 + 6j)   #
print('25' * 3)  # '252525'
print(3 * '25')  # '252525'
print('Hyd' * 4)  # 'HydHydHydHyd'
print([10 , 20 , 15] * 2)  # [10,20,15,10,20,15]
print((25, 10.8, 'Hyd', True) * 3) # (25,10.8,'Hyd',True,25,10.8,'Hyd',True,25,10.8,'Hyd',True)  
print([10 , 20 , 15] * 3.0)  # Error due to float
print({10 , 20 , 15} * 2)  #  Error
print({10 : 20 , 30 : 40} * 2)  # Error
print([10] * [20]) #Error



 #  /  operator  demo  program
print(9.0 / 2)  # 4.5
print(9 / 2.0)  # 4.5
print(9.0 / 2.0)  4.5
print(9 / 2)  #  4.5
print(10.5 / 2)  #5.25
print(10 / 3)  # 3.33
print(10 / 2)  # 5.0


'''
What  does  /  operator  do  ?  --->  Peforms  division   and  returns  float  quotient
'''




#  //  operator  demo  program
print(9 // 2)  #   prev  integer  of (4.5) = 4
print(9.0 // 2) # 4.0
print(9 // 2.0)  # 4.0
print(9.0 // 2.0)  # 4.0
print(10.5 // 2)  # 5.0
print(10 // 3)  # 3.0
print(10.0 // 3)  #    prev  integer  of  3.33 = 3.0
print(8.5 // 3) # 2.0
print(18 // 4)   #4.0
print(-18 // 4)  # -4.0
print(-(18 // 4))  #-4.0



'''
//  operator
--------------
1) What  does  //  operator do ?  --->  Same  as  /  operator  but  returns  previous  integer  of  /  result

2) What  is  the  result  of  integer // integer ?  --->  Integer  quotient
    What  is  the  result  of  integer // float ?  ---> Float  quotient  with  .0
    What  is  the  result  of  float // integer ?  ---> Float  quotient  with  .0
    What  is  the  result  of  float // float ?  ---> Float  quotient  with  .0

3) What  is  the  result  of  integer / integer ?  ---> Float  quotient
    What  is  the  result  of  integer / float ?  ---> Float  quotient
    What  is  the  result  of  float / integer ?  ---> Float  quotient
    What  is  the  result  of  float / float ?  ---> Float  quotient

4) When  is  the  result  of  //  operator  integer ?  ---> When  both  the  operands  are  integers
    When  is  the  result  of   //  operator  float  with  .0 ?  ---> When  at  least  one  operand  is  float
'''




# % operator demo program
print(9 % 5)  # 4
print(9.0 % 5)  # 4.0
print(9 % 5.0) # 4.0
print(9.0 % 5.0)  # 4.0
print(10.5 % 2)  #   0.5
print(8.9 % 3)  # 2.9


'''
%   operator
---------------
1) What  does  %  operator  do ?  ---> Performs  division  and  returns  remainder

2) When  is  the  result  of  %  operator  integer ?  ---> When  both  the  operands  are  integers
    When  is  the  result  of  %  operator  float ?  ---> When  at  least  one  operand  is  float
'''




 # Find outputs
print(7 / 0)  # Error
print(7 // 0) #error
print(7 % 0)  #Error



 # ** operator demo program
print(3 ** 4)  # 81
print(10 ** -2)  # 0.01
print(4 ** 3 ** 2)  # 262144
print(3 + 4 * 5 - 32 / 2 ** 3)  # 19.0




'''
**  operator
---------------
1) What  is  **  operator  called ?  --->  Exponential  operator

2) What  is  the  result  of  a ** b ?  ---> a ^ b

3) What  is  the  result  of  a ** b  ** c ?   --->  a ^ b ^ c

4) What  is  the  associativity  of  **  operator ?  ---> Right  to  left
    What  is  the  associativity  of  remaining  arithmetic  operators ?  ---> Left  to  right




#  Relational  operators  demo  program (Home  work)
print(9 >= 5)  #   True :  >  is  satisfied
print(9 >= 9)   #   True :  =  is  satisfied
print(9 >= 12)   #  False :  Both  are  not  satisfied
print(6 <= 8)  # True
print(6 <= 6) # True 
print(6 <= 4)  #True
print(9 != 7)  # True
print(6 == 8) # False
print(True  >  False)
print(3 + 4j == 3 + 4j) # True
print(3 + 4j == 5 + 6j)  # False
print(3 + 4j != 5 + 6j)  # True
print(10 == 10.0)  # True
print(3 + 4j >  3 + 4j)  # Error


'''
1) Can  complex  numbers   be  compared ?   ---> Yes  with  ==  and  !=

2) When  can  complex  numbers   be  not  compared  ?  ---> Wiith  > , <  , >=  and  <=
'''



 #  Find  outputs  (Home  work)
print('Rama'   >  'Rajesh')  #   True :  'm' > 'j'
print('Rama'  <  'Sita') #  True : 'R' < 'S'
print('Hyd'  ==  'Hyd')  # True
print('Rama'  <=   'Ramana')  # True
print('Rama  Rao'  >=  'Rama') # True
print('Hyd'  != 'Sec')   # True
print('HYD'  <   'hyd') # True


'''
1) Can  strings  be  compared  with  > ,  < , == ,  >= , <=  and  != ?  --->  Yes  only  in  python  but  not  in  other  languages

2) What  are  compared  internally  when  strings  are  compared ? --->  1st  non-matching  characters

3) Are  characters  compared  (or)  their  unicode  values ?  --->  Unicode  values

4) How  many  unicode  values  exist ?  ---> 512

5) What  is  the  range  of  unicode  values ?  ---> 0  to  511

6) What  are  the  unicode  values  of  'A'  to  'Z'  ?  ---> 65  to  90
     What  are  the  unicode  values  of  'a'  to   'z'  ?  --->  97  to  122
     What  are  the  unicode  values  of   '0'  to  '9' ?  ---> 48  to  57
     What  is  the  unicode  value  of   '$' ?  --->  36
     What  is  the  unicode  value  of  space ?  ---> 32

7) What  is  another  name  of  unicode ?  --->  Extended  Ascii (American  standard  code  for  information  and  interchange)
'''



# Chaining  relational  opeartors  (Home work)
print(10 < 20 < 30)  #   True
print(10 >= 20 < 30)  #   False : 10  is  not  >= 20
print(10 < 20 > 30)  # False
print(1 < 2 < 3 < 4)  # True
print(1 < 2 > 3 > 1) # False
print(4 > 3 >= 3 > 2) True



#  or  operator  demo program
print(True  or  False) #  True
print(False  or  True) #   True
print(True  or  True) #  True
print(False  or   False)   #  False
print(10  or  20)#  10
print(0   or  20)  #  20
print(-25  or  0)  # -25
print(''  or  35) # 35 
print(6j  or  'Hyd') # 6j
print(0.0  or  3 + 4j) # 3+4j
print('Hyd'   or   10.8)  # 'Hyd'


'''
or  operator
--------------
1) When  is  the  result  of  or  operator  True ?  ---> When  at  least  one  operand  is  True
    When  is  the  result  of  or  operator  False ?  ---> When  both  the  operands  are  False

2) What  is  the  result  of  op1  or  op2  when  op1  is  False ?  ---> op2
    What  is  the  result  of  op1  or  op2  when  op1  is  True ?  ---> op1

3) and ,  or  operators  are  quite  opposite
'''



 # not  operator  demo  program
print(not  True) #   False
print(not  False) #  True
print(not  25) # False
print(not  0)  # True
print(not  'Hyd')  # False
print(not  '')  # True
print(not  -10) # False
print(not  not  'Hyd')  # True


'''
not  operator
----------------
1) What  does  not  operator  do ?  ---> Complement  operation

2) Is  not  a  unary  operator  ?  ---> Yes  due  to  single  operand
    What  about  and ,  or ? ---> Binary  operators  due  to  two  operands

3) What  is  the  associativity  of  unary  operators ?  --->  Right  to  Left
    What  is  the  associativity  of  binary  operators ?  --->  Left  to  Right  except  for  **
'''


 #  Find   outputs (Home work)
i = 10
i = not  i > 14  
print(i) # True
print(not(6 < 4  or  9 >= 5  and  6 != 6))  # True